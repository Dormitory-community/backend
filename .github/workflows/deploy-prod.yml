name: Build and Deploy Docker (Optimized)

on:
  push:
    branches:
      - main
      - dev

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Docker 로그인 (GHCR)
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 4. 메타데이터 추출
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/my-app
          tags: |
            type=ref,event=branch
            type=raw,value=prod,enable={{is_default_branch}}
            type=raw,value=dev,enable={{is_default_branch}}

      # 5. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 6. Docker 이미지 빌드 및 push (환경별 Dockerfile)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ github.ref_name == 'main' && 'Dockerfile.prod' || 'Dockerfile.dev' }}
          platforms: ${{ github.ref_name == 'main' && 'linux/arm64' || 'linux/amd64' }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/my-app:${{ github.ref_name == 'main' && 'prod' || 'dev' }}
            ${{ env.REGISTRY }}/${{ github.repository }}/my-app:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # 7. Trigger Jenkins Deploy
      - name: Trigger Jenkins Deploy
        run: |
          DEPLOY_ENV=${{ github.ref_name == 'main' && 'prod' || 'dev' }}
          curl -X POST \
               -A "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36" \
               "https://${{ secrets.JENKINS_SERVER }}/job/production/buildWithParameters?token=${{ secrets.JENKINS_TOKEN }}&DEPLOY_ENV=${DEPLOY_ENV}" \
               --user ${{ secrets.JENKINS_USERNAME }}:${{ secrets.API_TOKEN }}